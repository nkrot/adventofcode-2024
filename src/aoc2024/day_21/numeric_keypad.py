from typing import Iterator

import networkx as nx

from . import utils

# +---+---+---+
# | 7 | 8 | 9 |
# +---+---+---+
# | 4 | 5 | 6 |
# +---+---+---+
# | 1 | 2 | 3 |
# +---+---+---+
#     | 0 | A |
#     +---+---+

KEYPAD = nx.DiGraph()

KEYPAD.add_edges_from([
#    ("", "", {"d": ""}),

    ("9", "8", {"d": "<"}),
    ("9", "6", {"d": "v"}),

    ("8", "9", {"d": ">"}),
    ("8", "7", {"d": "<"}),
    ("8", "5", {"d": "v"}),

    ("7", "8", {"d": ">"}),
    ("7", "4", {"d": "v"}),

    ("6", "9", {"d": "^"}),
    ("6", "5", {"d": "<"}),
    ("6", "3", {"d": "v"}),

    ("5", "8", {"d": "^"}),
    ("5", "6", {"d": ">"}),
    ("5", "4", {"d": "<"}),
    ("5", "2", {"d": "v"}),

    ("4", "1", {"d": "v"}),
    ("4", "5", {"d": ">"}),
    ("4", "7", {"d": "^"}),

    ("3", "A", {"d": "v"}),
    ("3", "2", {"d": "<"}),
    ("3", "6", {"d": "^"}),

    ("2", "3", {"d": ">"}),
    ("2", "5", {"d": "^"}),
    ("2", "1", {"d": "<"}),
    ("2", "0", {"d": "v"}),

    ("1", "2", {"d": ">"}),
    ("1", "4", {"d": "^"}),

    ("0", "A", {"d": ">"}),
    ("0", "2", {"d": "^"}),

    ("A", "0", {"d": "<"}),
    ("A", "3", {"d": "^"}),
])


def press(src: str, trg: str, g = KEYPAD) -> Iterator[str]:
    return (p + "A" for p in utils.path_to(src, trg, g))


def type_code(code: str, start: str = "A") -> Iterator[str]:
    yield from utils.type_code(
        code,
        start,
        lambda src, trg: press(src, trg, KEYPAD)
    )
